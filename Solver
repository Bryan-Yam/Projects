BOARD_SIZE = 9
board = []

print("Please enter the values of the board one at a time from left to right. (Place 0 if spot is empty.)")
for i in range(BOARD_SIZE):
    board.append([])
    for j in range(BOARD_SIZE):
        num = int(input())
        board[i].append(num)

def print_board(board):

    for i in range(len(board)) :
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - ")

        for j in range(len(board)):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")

            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")

def find_sqaure(board):

    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] == 0:
                return (i, j) #return row then col

    return False

def checker(board, num, pos):

    #Check row
    for i in range(len(board)):
        if board[pos[0]][i] == num and pos[1] != i:
            return False
    #Check Col
    for i in range(len(board)):
        if board[i][pos[1]] == num and pos[0] != i:
            return False
    #Check Cube
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x* 3 + 3):
            if board[i][j] == num and (i, j) != pos:
                return False

    return True

def solver(board):

    find = find_sqaure(board)

    if not find:
        return True
    else:
        row, col = find

    for i in range(1,10):
        if checker(board, i, (row, col)):
            board[row][col] = i

            if solver(board):
                return True

            board[row][col] = 0

    return False

print_board(board)

if solver(board) == True:
    print(" ")
    print_board(board)
else:
    print("Board cannot be solved.")